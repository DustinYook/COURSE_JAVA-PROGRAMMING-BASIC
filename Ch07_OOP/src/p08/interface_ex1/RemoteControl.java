package p08.interface_ex1;

// 인터페이스의 구성요소는 4가지: 추상메소드, 고정상수, 디폴트메소드, 클래스메소드
public interface RemoteControl // 인터페이스 => 가져다 써먹는 방법: 구현을 해서 써먹음
{
	// Interface: 공통된 메소드들을 모아놓은 것, 객체생성이 불가능 (추상메소드를 포함했기 때문) => 객체생성하려면 구현(implements)된 클래스를 만들어서 사용
	// 인터페이스는 추상 메소드(미완성 설계도)보다 추상화 정도가 더 심한 것 (기본 설계도, 초안; first draft)
	// 인터페이스는 추상 메소드를 사용하기 때문에 추상클래스의 속성인 일관성과 강제성을 공유함 (추상클래스와 비슷)
	// 중요)인터페이스 간에는 다중상속 <-> 클래스는 단일상속
	// java 7.0: 추상메소드, 고정상수만 사용가능 했었음
	// java 8.0: 추상메소드, 고정상수, default(), static() => 두 가지가 추가
	
	// 1.고정상수: 초기에 저장된 값을 프로그램이 종료될 때까지 유지함
	static final int MAX_VOLUME = 10; // 위와 아래는 의미가 같음
	             int MIN_VOLUME = 0; // 인터페이스 내에세는 static final 생략가능 (static final)
	             
    // 2.추상메소드: 메소드 선언부만 작성 -> 재정의(overriding)
	abstract void turnOn(); // 인터페이스 내에서는 abstract 생략가능
	         void turnOff(); // 추상메소드 => 강제성과 일관성을 부여함
	         void setVolume(int volume);
	
	// 이 아래 것은 java 8.0에서 새로이 추가된 내용: 추가된 이유 => 유지보수에서의 용이성을 증진시키기 위함
	// 프로그래밍은 고정불변이 아니라 매번 새롭게 바뀔 수 있음
	// 3.default(): 실행내용(메소드 body)까지 작성 -> 반드시 default 키워드를 써야함 (필요에 따라 재정의해서 사용가능)
	default void setMute(boolean mute) // 명시적으로 default를 써준다는 것이 특이함 (보통은 생략했었음)
	{ // 가져가서 그대로 쓰거나 재정의해서 씀
		if(mute)
			System.out.println("무음모드를 실행합니다.");
		else
			System.out.println("무음모드를 해제합니다.");
	}
	
	// 4.static(): static기능(메모리에 올리는 것)으로 "클래스명.메소드명"와 같이 사용 (도트연산자 사용하여 호출)
	static void changeBattery()
	{
		System.out.println("건전지 교체가 필요합니다.");
	}
}
//1)인터페이스: 공통되는 것을 가져다 쓰고 다른 부분을 추가
//자식클래스는 하나의 부모클래스로부터 상속받을 수 있음 (상속은 여러 부모클래스로부터 받을 수 없음)
//부모클래스는 여러 자식클래스에게 상속해줄 수 있음
//상속을 받을 수 없으므로 공통된 기능을 공유함!
//생긴 이유: 상속의 단일상속성 때문에 인터페이스가 등장
//공통된 기능을 추출하여 공유함
//2)다형성: 부모의 참조변수하나로 여러개의 자식객체를 가르킬 수 있음